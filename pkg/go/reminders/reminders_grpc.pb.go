// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: reminders/reminders.proto

package reminders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RemindersService_AddReminder_FullMethodName          = "/reminders.RemindersService/AddReminder"
	RemindersService_GetUpcomingReminders_FullMethodName = "/reminders.RemindersService/GetUpcomingReminders"
	RemindersService_GetReminders_FullMethodName         = "/reminders.RemindersService/GetReminders"
	RemindersService_MarkReminderAsSent_FullMethodName   = "/reminders.RemindersService/MarkReminderAsSent"
	RemindersService_DeleteReminder_FullMethodName       = "/reminders.RemindersService/DeleteReminder"
)

// RemindersServiceClient is the client API for RemindersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemindersServiceClient interface {
	AddReminder(ctx context.Context, in *AddReminderRequest, opts ...grpc.CallOption) (*AddReminderResponse, error)
	GetUpcomingReminders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUpcomingRemindersResponse, error)
	GetReminders(ctx context.Context, in *GetRemindersRequest, opts ...grpc.CallOption) (*GetUpcomingRemindersResponse, error)
	MarkReminderAsSent(ctx context.Context, in *DeleteReminderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteReminder(ctx context.Context, in *DeleteReminderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remindersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemindersServiceClient(cc grpc.ClientConnInterface) RemindersServiceClient {
	return &remindersServiceClient{cc}
}

func (c *remindersServiceClient) AddReminder(ctx context.Context, in *AddReminderRequest, opts ...grpc.CallOption) (*AddReminderResponse, error) {
	out := new(AddReminderResponse)
	err := c.cc.Invoke(ctx, RemindersService_AddReminder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindersServiceClient) GetUpcomingReminders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUpcomingRemindersResponse, error) {
	out := new(GetUpcomingRemindersResponse)
	err := c.cc.Invoke(ctx, RemindersService_GetUpcomingReminders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindersServiceClient) GetReminders(ctx context.Context, in *GetRemindersRequest, opts ...grpc.CallOption) (*GetUpcomingRemindersResponse, error) {
	out := new(GetUpcomingRemindersResponse)
	err := c.cc.Invoke(ctx, RemindersService_GetReminders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindersServiceClient) MarkReminderAsSent(ctx context.Context, in *DeleteReminderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemindersService_MarkReminderAsSent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindersServiceClient) DeleteReminder(ctx context.Context, in *DeleteReminderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemindersService_DeleteReminder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemindersServiceServer is the server API for RemindersService service.
// All implementations should embed UnimplementedRemindersServiceServer
// for forward compatibility
type RemindersServiceServer interface {
	AddReminder(context.Context, *AddReminderRequest) (*AddReminderResponse, error)
	GetUpcomingReminders(context.Context, *emptypb.Empty) (*GetUpcomingRemindersResponse, error)
	GetReminders(context.Context, *GetRemindersRequest) (*GetUpcomingRemindersResponse, error)
	MarkReminderAsSent(context.Context, *DeleteReminderRequest) (*emptypb.Empty, error)
	DeleteReminder(context.Context, *DeleteReminderRequest) (*emptypb.Empty, error)
}

// UnimplementedRemindersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRemindersServiceServer struct {
}

func (UnimplementedRemindersServiceServer) AddReminder(context.Context, *AddReminderRequest) (*AddReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReminder not implemented")
}
func (UnimplementedRemindersServiceServer) GetUpcomingReminders(context.Context, *emptypb.Empty) (*GetUpcomingRemindersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingReminders not implemented")
}
func (UnimplementedRemindersServiceServer) GetReminders(context.Context, *GetRemindersRequest) (*GetUpcomingRemindersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReminders not implemented")
}
func (UnimplementedRemindersServiceServer) MarkReminderAsSent(context.Context, *DeleteReminderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkReminderAsSent not implemented")
}
func (UnimplementedRemindersServiceServer) DeleteReminder(context.Context, *DeleteReminderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReminder not implemented")
}

// UnsafeRemindersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemindersServiceServer will
// result in compilation errors.
type UnsafeRemindersServiceServer interface {
	mustEmbedUnimplementedRemindersServiceServer()
}

func RegisterRemindersServiceServer(s grpc.ServiceRegistrar, srv RemindersServiceServer) {
	s.RegisterService(&RemindersService_ServiceDesc, srv)
}

func _RemindersService_AddReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServiceServer).AddReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemindersService_AddReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServiceServer).AddReminder(ctx, req.(*AddReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemindersService_GetUpcomingReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServiceServer).GetUpcomingReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemindersService_GetUpcomingReminders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServiceServer).GetUpcomingReminders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemindersService_GetReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemindersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServiceServer).GetReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemindersService_GetReminders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServiceServer).GetReminders(ctx, req.(*GetRemindersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemindersService_MarkReminderAsSent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServiceServer).MarkReminderAsSent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemindersService_MarkReminderAsSent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServiceServer).MarkReminderAsSent(ctx, req.(*DeleteReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemindersService_DeleteReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServiceServer).DeleteReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemindersService_DeleteReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServiceServer).DeleteReminder(ctx, req.(*DeleteReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemindersService_ServiceDesc is the grpc.ServiceDesc for RemindersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemindersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reminders.RemindersService",
	HandlerType: (*RemindersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReminder",
			Handler:    _RemindersService_AddReminder_Handler,
		},
		{
			MethodName: "GetUpcomingReminders",
			Handler:    _RemindersService_GetUpcomingReminders_Handler,
		},
		{
			MethodName: "GetReminders",
			Handler:    _RemindersService_GetReminders_Handler,
		},
		{
			MethodName: "MarkReminderAsSent",
			Handler:    _RemindersService_MarkReminderAsSent_Handler,
		},
		{
			MethodName: "DeleteReminder",
			Handler:    _RemindersService_DeleteReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminders/reminders.proto",
}
